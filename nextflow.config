/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ebi-metagenomics/shallowmapping Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

manifest {
    nextflowVersion = '!>=23.04.0'
    mainScript = "main.nf"
}

plugins {
    id 'nf-validation'
}


params {

    // Input options
    input                      = null
    biome                      = null
    outdir                     = "results"
    mapping_tool               = "sourmash"

    /*
    * Mapping tool options:
    *
    * - bwa: Use bwa-mem2 to map the clean raw-reads
    *   to the representative genomes catalogue.
    *   With an input of 2M shallow shotgun raw-reads:
    *    - Memory ~18 GB
    *    - Runtime ~3 min 
    *
    * - sourmash: Use Sourmash gather to find genome matches
    *   in a representative genomes catalogue.
    *   This is the default option.
    *   With an input of 2M shallow shotgun raw-reads:
    *    - Memory ~160 MB
    *    - Runtime ~1 min
    */

    /*
    * Biome options:
    *    chicken-gut-v1-0-1
    *    mouse-gut-v1-0 
    * 
    */

    // Reference databases
    reference_genomes_folder     = "databases/$params.biome/"
    sourmash_db                  = "databases/$params.biome/sourmash_reps_k51.sbt.zip"

    //bwa_db                     = "databases/$params.biome/bwa_reps.fa"
    //pangenome_db               = "databases/$params.biome/functional_profiles_DB/*"

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = ''
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/codon.config'
includeConfig 'conf/modules.config'
includeConfig 'subworkflows/ebi-metagenomics/reads_bwamem2_decontamination/nextflow.config'

profiles {
    singularity {
        enabled    = true
        autoMounts = true
        cacheDir   = params.singularity_cachedir
        registry   = 'quay.io'
    }

    local {
        docker {
            enabled = true
            autoMounts = true
            registry = 'quay.io'
            userEmulation = true
            runOptions = "--platform linux/x86_64"
        }
        executor {
            name = "local"
            cpus = 2
            memory = '1 GB'
        }
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'ebi-metagenomics/shallowmapping'
    author          = """Microbiome Informatics team"""
    homePage        = 'https://github.com/ebi-metagenomics/shallowmapping'
    description     = """Shallow-shotgun mapping pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
